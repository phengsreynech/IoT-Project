// Periodically check server for remote commands
if (millis() - lastServerCheck > serverCheckInterval) {
  checkServerState();
  lastServerCheck = millis();
}

delay(50); // Small delay for stability

// Function to get the manual button state
char getManualState() {
  // Read button states (LOW when pressed due to INPUT_PULLUP)
  bool redPressed = (digitalRead(redBtn) == LOW);
  bool yellowPressed = (digitalRead(yellowBtn) == LOW);
  bool greenPressed = (digitalRead(greenBtn) == LOW);

  // Debug: Show button states occasionally
  static unsigned long lastDebug = 0;
  if (millis() - lastDebug > 3000) { // Every 3 seconds
    Serial.print("Button states - Red: ");
    Serial.print(redPressed ? "PRESSED" : "RELEASED");
    Serial.print(", Yellow: ");
    Serial.print(yellowPressed ? "PRESSED" : "RELEASED");
    Serial.print(", Green: ");
    Serial.println(greenPressed ? "PRESSED" : "RELEASED");
    lastDebug = millis();
  }

  if (redPressed) return 'R';
  if (yellowPressed) return 'Y';
  if (greenPressed) return 'G';
  return ' '; // No button pressed
}

// Function to set LED state
void setLEDState(char state) {
  Serial.print("Setting LED state to: ");
  Serial.println(state);

  // Turn off all LEDs first
  digitalWrite(redLED, LOW);
  digitalWrite(yellowLED, LOW);
  digitalWrite(greenLED, LOW);
  Serial.println("All LEDs turned OFF");

  // Turn on the appropriate LED
  switch (state) {
    case 'R':
      digitalWrite(redLED, HIGH);
      Serial.print("Red LED set to HIGH on pin D");
      Serial.println(redLED);
      // Verify the pin state
      Serial.print("Pin D");
      Serial.print(redLED);
      Serial.print(" state: ");
      Serial.println(digitalRead(redLED) ? "HIGH" : "LOW");
      break;

    case 'Y':
      digitalWrite(yellowLED, HIGH);
      Serial.print("Yellow LED set to HIGH on pin D");
      Serial.println(yellowLED);
      Serial.print("Pin D");
      Serial.print(yellowLED);
      Serial.print(" state: ");
      Serial.println(digitalRead(yellowLED) ? "HIGH" : "LOW");
      break;

    case 'G':
      digitalWrite(greenLED, HIGH);
      Serial.print("Green LED set to HIGH on pin D");
      Serial.println(greenLED);
      Serial.print("Pin D");
      Serial.print(greenLED);
      Serial.print(" state: ");
      Serial.println(digitalRead(greenLED) ? "HIGH" : "LOW");
      break;

    default:
      Serial.println("All LEDs OFF (default case)");
      break;
  }
}

// Simple JSON parser function â€” extracts values without library
String extractJsonValue(String json, String key) {
  String searchKey = "\"" + key + "\":";
  int startIndex = json.indexOf(searchKey);
  if (startIndex == -1) return "";

  startIndex += searchKey.length();

  // Skip whitespace
  while (startIndex < json.length() && 
        (json.charAt(startIndex) == ' ' || json.charAt(startIndex) == '\t')) {
    startIndex++;
  }

  // Check if value is a string (starts with quote)
  if (json.charAt(startIndex) == '\'') {
    startIndex++; // Skip opening quote
    int endIndex = json.indexOf('\'', startIndex);
    if (endIndex == -1) return "";
    return json.substring(startIndex, endIndex);
  } else {
    // For non-string values, find end by comma or closing brace
    int endIndex = startIndex;
    while (endIndex < json.length() &&
          json.charAt(endIndex) != ',' &&
          json.charAt(endIndex) != '}' &&
          json.charAt(endIndex) != ' ' &&
          json.charAt(endIndex) != '\n') {
      endIndex++;
    }
    return json.substring(startIndex, endIndex);
  }
}
